# require 'digest/sha1'
# 
# class User < ActiveRecord::Base
#   
#   
#   
#   # ---------------------------------------
#   # The following code has been generated by role_requirement.
#   # You may wish to modify it to suit your need
#   has_and_belongs_to_many :roles
#   
#   # has_role? simply needs to return true or false whether a user has a role or not.  
#   # It may be a good idea to have "admin" roles return true always
#   def has_role?(role_in_question)
#     @_list ||= self.roles.collect(&:name)
#     return true if @_list.include?("admin")
#     (@_list.include?(role_in_question.to_s) )
#   end
#   # ---------------------------------------
#   
#   
#   
#   
#   include Authentication
#   include Authentication::ByPassword
#   include Authentication::ByCookieToken
# 
#   validates_presence_of     :login
#   validates_length_of       :login,    :within => 3..40
#   validates_uniqueness_of   :login
#   validates_format_of       :login,    :with => Authentication.login_regex, :message => Authentication.bad_login_message
# 
#   validates_format_of       :name,     :with => Authentication.name_regex,  :message => Authentication.bad_name_message, :allow_nil => true
#   validates_length_of       :name,     :maximum => 100
# 
#   validates_presence_of     :email
#   validates_length_of       :email,    :within => 6..100 #r@a.wk
#   validates_uniqueness_of   :email
#   validates_format_of       :email,    :with => Authentication.email_regex, :message => Authentication.bad_email_message
# 
#   
# 
#   # HACK HACK HACK -- how to do attr_accessible from here?
#   # prevents a user from submitting a crafted form that bypasses activation
#   # anything else you want your user to change should be added here.
#   attr_accessible :login, :email, :name, :password, :password_confirmation
# 
# 
# 
#   # Authenticates a user by their login name and unencrypted password.  Returns the user or nil.
#   #
#   # uff.  this is really an authorization, not authentication routine.  
#   # We really need a Dispatch Chain here or something.
#   # This will also let us return a human error message.
#   #
#   def self.authenticate(login, password)
#     return nil if login.blank? || password.blank?
#     u = find_by_login(login.downcase) # need to get the salt
#     u && u.authenticated?(password) ? u : nil
#   end
# 
#   def login=(value)
#     write_attribute :login, (value ? value.downcase : nil)
#   end
# 
#   def email=(value)
#     write_attribute :email, (value ? value.downcase : nil)
#   end
# 
#   protected
#     
# 
# 
# end


require 'digest/sha1'

class User < ActiveRecord::Base
  include Authentication
  include Authentication::ByPassword
  include Authentication::ByCookieToken

  validates_presence_of     :login
  validates_length_of       :login,    :within => 3..40
  validates_uniqueness_of   :login
  validates_format_of       :login,    :with => Authentication.login_regex, :message => Authentication.bad_login_message

  # validates_format_of       :name,     :with => Authentication.name_regex,  :message => Authentication.bad_name_message, :allow_nil => true
  # validates_length_of       :name,     :maximum => 100

  validates_presence_of     :email
  validates_length_of       :email,    :within => 6..100 #r@a.wk
  validates_uniqueness_of   :email
  validates_format_of       :email,    :with => Authentication.email_regex, :message => Authentication.bad_email_message
  
  validates_presence_of :first_name, :on => :create, :message => "can't be blank"
  validates_presence_of :last_name, :on => :create, :message => "can't be blank"

  # before_create :make_activation_code 

  # HACK HACK HACK -- how to do attr_accessible from here?
  # prevents a user from submitting a crafted form that bypasses activation
  # anything else you want your user to change should be added here.
  attr_accessible :login, :email, :name, :password, :password_confirmation, :role_ids, :first_name, :last_name, :old_password
  
  # ---------------------------------------
  # The following code has been generated by role_requirement.
  # You may wish to modify it to suit your need
  has_and_belongs_to_many :roles
  has_many :donations
  has_many :campaigns, :foreign_key => "admin_id"
  
  has_many :dialables
  has_many :campaigns, :through => :dialables
  belongs_to :company
  
  def fullname
    return "#{self.first_name} #{self.last_name}"
  end

  # has_role? simply needs to return true or false whether a user has a role or not.  
  # It may be a good idea to have "admin" roles return true always
  def has_role?(role_in_question)
    @_list ||= self.roles.collect(&:name)
    # return true if @_list.include?("admin")
    (@_list.include?(role_in_question.to_s) )
  end
  # ---------------------------------------
  
  # Activates the user in the database.
  def activate!
    @activated = true
    if self.is_company_admin
      self.role_ids = ["1"] #company admin
    else
      self.role_ids = ["3"] #as a user by default -- limited
    end
    save(false)
  end

  # Returns true if the user has just been activated.
  def recently_activated?
    @activated
  end

  def active?
    # the existence of an activation code means they have not activated yet
    activation_code.nil?
  end

  # Authenticates a user by their login name and unencrypted password.  Returns the user or nil.
  #
  # uff.  this is really an authorization, not authentication routine.  
  # We really need a Dispatch Chain here or something.
  # This will also let us return a human error message.
  #
  def self.authenticate(login, password)
    return nil if login.blank? || password.blank?
    u = find :first, :conditions => ['login = ?', login] # need to get the salt
    u && u.authenticated?(password) ? u : nil
  end

  def login=(value)
    write_attribute :login, (value ? value.downcase : nil)
  end

  def email=(value)
    write_attribute :email, (value ? value.downcase : nil)
  end
  
  def forgot_password
    @forgotten_password = true
    self.make_password_reset_code
  end

  def reset_password
    # First update the password_reset_code before setting the
    # reset_password flag to avoid duplicate mail notifications.
    update_attributes(:password_reset_code => nil)
    @reset_password = nil
  end

  # Used in user_observer
  def recently_forgot_password?
    @forgotten_password
  end

  # Used in user_observer
  def recently_reset_password?
    @reset_password
  end

  # Used in user_observer
  def recently_activated?
    @activated
  end

  protected
    
    def make_activation_code
        self.activation_code = self.class.make_token
    end
    
    def make_password_reset_code
      self.password_reset_code = Digest::SHA1.hexdigest( Time.now.to_s.split(//).sort_by {rand}.join )
    end

end
